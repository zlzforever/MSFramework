// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ordering.Infrastructure.CompileModels
{
    public partial class OrderingContextModel
    {
        partial void Initialize()
        {
            var auditEntity = AuditEntityEntityType.Create(this);
            var auditOperation = AuditOperationEntityType.Create(this);
            var auditProperty = AuditPropertyEntityType.Create(this);
            var address = AddressEntityType.Create(this);
            var order = OrderEntityType.Create(this);
            var orderItem = OrderItemEntityType.Create(this);
            var orderProduct = OrderProductEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var user = UserEntityType.Create(this);

            AuditEntityEntityType.CreateForeignKey1(auditEntity, auditOperation);
            AuditPropertyEntityType.CreateForeignKey1(auditProperty, auditEntity);
            AddressEntityType.CreateForeignKey1(address, order);
            OrderEntityType.CreateForeignKey1(order, user);
            OrderItemEntityType.CreateForeignKey1(orderItem, order);
            OrderProductEntityType.CreateForeignKey1(orderProduct, orderItem);

            AuditEntityEntityType.CreateAnnotations(auditEntity);
            AuditOperationEntityType.CreateAnnotations(auditOperation);
            AuditPropertyEntityType.CreateAnnotations(auditProperty);
            AddressEntityType.CreateAnnotations(address);
            OrderEntityType.CreateAnnotations(order);
            OrderItemEntityType.CreateAnnotations(orderItem);
            OrderProductEntityType.CreateAnnotations(orderProduct);
            ProductEntityType.CreateAnnotations(product);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("DatabaseType", "mysql");
            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var auditEntity = FindEntityType("MicroserviceFramework.Auditing.Model.AuditEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            auditEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microserviceFrameworkAuditingModelAuditEntityTableBase = new TableBase("MicroserviceFramework.Auditing.Model.AuditEntity", null, relationalModel);
            var entity_idColumnBase = new ColumnBase<ColumnMappingBase>("entity_id", "varchar(36)", microserviceFrameworkAuditingModelAuditEntityTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditEntityTableBase.Columns.Add("entity_id", entity_idColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "varchar(36)", microserviceFrameworkAuditingModelAuditEntityTableBase);
            microserviceFrameworkAuditingModelAuditEntityTableBase.Columns.Add("id", idColumnBase);
            var operation_idColumnBase = new ColumnBase<ColumnMappingBase>("operation_id", "varchar(36)", microserviceFrameworkAuditingModelAuditEntityTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditEntityTableBase.Columns.Add("operation_id", operation_idColumnBase);
            var operation_typeColumnBase = new ColumnBase<ColumnMappingBase>("operation_type", "varchar(256)", microserviceFrameworkAuditingModelAuditEntityTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditEntityTableBase.Columns.Add("operation_type", operation_typeColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "varchar(256)", microserviceFrameworkAuditingModelAuditEntityTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditEntityTableBase.Columns.Add("type", typeColumnBase);
            relationalModel.DefaultTables.Add("MicroserviceFramework.Auditing.Model.AuditEntity", microserviceFrameworkAuditingModelAuditEntityTableBase);
            var microserviceFrameworkAuditingModelAuditEntityMappingBase = new TableMappingBase<ColumnMappingBase>(auditEntity, microserviceFrameworkAuditingModelAuditEntityTableBase, true);
            microserviceFrameworkAuditingModelAuditEntityTableBase.AddTypeMapping(microserviceFrameworkAuditingModelAuditEntityMappingBase, false);
            defaultTableMappings.Add(microserviceFrameworkAuditingModelAuditEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, auditEntity.FindProperty("Id")!, microserviceFrameworkAuditingModelAuditEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entity_idColumnBase, auditEntity.FindProperty("EntityId")!, microserviceFrameworkAuditingModelAuditEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operation_idColumnBase, auditEntity.FindProperty("OperationId")!, microserviceFrameworkAuditingModelAuditEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operation_typeColumnBase, auditEntity.FindProperty("OperationType")!, microserviceFrameworkAuditingModelAuditEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, auditEntity.FindProperty("Type")!, microserviceFrameworkAuditingModelAuditEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            auditEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var ordering_audit_entityTable = new Table("ordering_audit_entity", null, relationalModel);
            var idColumn = new Column("id", "varchar(36)", ordering_audit_entityTable);
            ordering_audit_entityTable.Columns.Add("id", idColumn);
            var entity_idColumn = new Column("entity_id", "varchar(36)", ordering_audit_entityTable)
            {
                IsNullable = true
            };
            ordering_audit_entityTable.Columns.Add("entity_id", entity_idColumn);
            var operation_idColumn = new Column("operation_id", "varchar(36)", ordering_audit_entityTable)
            {
                IsNullable = true
            };
            ordering_audit_entityTable.Columns.Add("operation_id", operation_idColumn);
            var operation_typeColumn = new Column("operation_type", "varchar(256)", ordering_audit_entityTable)
            {
                IsNullable = true
            };
            ordering_audit_entityTable.Columns.Add("operation_type", operation_typeColumn);
            var typeColumn = new Column("type", "varchar(256)", ordering_audit_entityTable)
            {
                IsNullable = true
            };
            ordering_audit_entityTable.Columns.Add("type", typeColumn);
            var pK_ordering_audit_entity = new UniqueConstraint("PK_ordering_audit_entity", ordering_audit_entityTable, new[] { idColumn });
            ordering_audit_entityTable.PrimaryKey = pK_ordering_audit_entity;
            var pK_ordering_audit_entityUc = RelationalModel.GetKey(this,
                "MicroserviceFramework.Auditing.Model.AuditEntity",
                new[] { "Id" });
            pK_ordering_audit_entity.MappedKeys.Add(pK_ordering_audit_entityUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_audit_entityUc).Add(pK_ordering_audit_entity);
            ordering_audit_entityTable.UniqueConstraints.Add("PK_ordering_audit_entity", pK_ordering_audit_entity);
            var iX_ordering_audit_entity_entity_id = new TableIndex(
            "IX_ordering_audit_entity_entity_id", ordering_audit_entityTable, new[] { entity_idColumn }, false);
            var iX_ordering_audit_entity_entity_idIx = RelationalModel.GetIndex(this,
                "MicroserviceFramework.Auditing.Model.AuditEntity",
                new[] { "EntityId" });
            iX_ordering_audit_entity_entity_id.MappedIndexes.Add(iX_ordering_audit_entity_entity_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_audit_entity_entity_idIx).Add(iX_ordering_audit_entity_entity_id);
            ordering_audit_entityTable.Indexes.Add("IX_ordering_audit_entity_entity_id", iX_ordering_audit_entity_entity_id);
            var iX_ordering_audit_entity_operation_id = new TableIndex(
            "IX_ordering_audit_entity_operation_id", ordering_audit_entityTable, new[] { operation_idColumn }, false);
            var iX_ordering_audit_entity_operation_idIx = RelationalModel.GetIndex(this,
                "MicroserviceFramework.Auditing.Model.AuditEntity",
                new[] { "OperationId" });
            iX_ordering_audit_entity_operation_id.MappedIndexes.Add(iX_ordering_audit_entity_operation_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_audit_entity_operation_idIx).Add(iX_ordering_audit_entity_operation_id);
            ordering_audit_entityTable.Indexes.Add("IX_ordering_audit_entity_operation_id", iX_ordering_audit_entity_operation_id);
            relationalModel.Tables.Add(("ordering_audit_entity", null), ordering_audit_entityTable);
            var ordering_audit_entityTableMapping = new TableMapping(auditEntity, ordering_audit_entityTable, true);
            ordering_audit_entityTable.AddTypeMapping(ordering_audit_entityTableMapping, false);
            tableMappings.Add(ordering_audit_entityTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, auditEntity.FindProperty("Id")!, ordering_audit_entityTableMapping);
            RelationalModel.CreateColumnMapping(entity_idColumn, auditEntity.FindProperty("EntityId")!, ordering_audit_entityTableMapping);
            RelationalModel.CreateColumnMapping(operation_idColumn, auditEntity.FindProperty("OperationId")!, ordering_audit_entityTableMapping);
            RelationalModel.CreateColumnMapping(operation_typeColumn, auditEntity.FindProperty("OperationType")!, ordering_audit_entityTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, auditEntity.FindProperty("Type")!, ordering_audit_entityTableMapping);

            var auditOperation = FindEntityType("MicroserviceFramework.Auditing.Model.AuditOperation")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            auditOperation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microserviceFrameworkAuditingModelAuditOperationTableBase = new TableBase("MicroserviceFramework.Auditing.Model.AuditOperation", null, relationalModel);
            var creation_timeColumnBase = new ColumnBase<ColumnMappingBase>("creation_time", "bigint", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("creation_time", creation_timeColumnBase);
            var creator_idColumnBase = new ColumnBase<ColumnMappingBase>("creator_id", "varchar(36)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("creator_id", creator_idColumnBase);
            var creator_nameColumnBase = new ColumnBase<ColumnMappingBase>("creator_name", "varchar(256)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("creator_name", creator_nameColumnBase);
            var device_idColumnBase = new ColumnBase<ColumnMappingBase>("device_id", "varchar(36)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("device_id", device_idColumnBase);
            var device_modelColumnBase = new ColumnBase<ColumnMappingBase>("device_model", "varchar(256)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("device_model", device_modelColumnBase);
            var elapsedColumnBase = new ColumnBase<ColumnMappingBase>("elapsed", "int", microserviceFrameworkAuditingModelAuditOperationTableBase);
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("elapsed", elapsedColumnBase);
            var end_timeColumnBase = new ColumnBase<ColumnMappingBase>("end_time", "bigint", microserviceFrameworkAuditingModelAuditOperationTableBase);
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("end_time", end_timeColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "varchar(36)", microserviceFrameworkAuditingModelAuditOperationTableBase);
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("id", idColumnBase0);
            var ipColumnBase = new ColumnBase<ColumnMappingBase>("ip", "varchar(256)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("ip", ipColumnBase);
            var latColumnBase = new ColumnBase<ColumnMappingBase>("lat", "double", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("lat", latColumnBase);
            var lngColumnBase = new ColumnBase<ColumnMappingBase>("lng", "double", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("lng", lngColumnBase);
            var trace_idColumnBase = new ColumnBase<ColumnMappingBase>("trace_id", "varchar(64)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("trace_id", trace_idColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("url", "varchar(1024)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("url", urlColumnBase);
            var user_agentColumnBase = new ColumnBase<ColumnMappingBase>("user_agent", "varchar(1024)", microserviceFrameworkAuditingModelAuditOperationTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditOperationTableBase.Columns.Add("user_agent", user_agentColumnBase);
            relationalModel.DefaultTables.Add("MicroserviceFramework.Auditing.Model.AuditOperation", microserviceFrameworkAuditingModelAuditOperationTableBase);
            var microserviceFrameworkAuditingModelAuditOperationMappingBase = new TableMappingBase<ColumnMappingBase>(auditOperation, microserviceFrameworkAuditingModelAuditOperationTableBase, true);
            microserviceFrameworkAuditingModelAuditOperationTableBase.AddTypeMapping(microserviceFrameworkAuditingModelAuditOperationMappingBase, false);
            defaultTableMappings0.Add(microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, auditOperation.FindProperty("Id")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creation_timeColumnBase, auditOperation.FindProperty("CreationTime")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_idColumnBase, auditOperation.FindProperty("CreatorId")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_nameColumnBase, auditOperation.FindProperty("CreatorName")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)device_idColumnBase, auditOperation.FindProperty("DeviceId")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)device_modelColumnBase, auditOperation.FindProperty("DeviceModel")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)elapsedColumnBase, auditOperation.FindProperty("Elapsed")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)end_timeColumnBase, auditOperation.FindProperty("EndTime")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ipColumnBase, auditOperation.FindProperty("IP")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latColumnBase, auditOperation.FindProperty("Lat")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lngColumnBase, auditOperation.FindProperty("Lng")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)trace_idColumnBase, auditOperation.FindProperty("TraceId")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, auditOperation.FindProperty("Url")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_agentColumnBase, auditOperation.FindProperty("UserAgent")!, microserviceFrameworkAuditingModelAuditOperationMappingBase);

            var tableMappings0 = new List<TableMapping>();
            auditOperation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var ordering_audit_operationTable = new Table("ordering_audit_operation", null, relationalModel);
            var idColumn0 = new Column("id", "varchar(36)", ordering_audit_operationTable);
            ordering_audit_operationTable.Columns.Add("id", idColumn0);
            var creation_timeColumn = new Column("creation_time", "bigint", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("creation_time", creation_timeColumn);
            var creator_idColumn = new Column("creator_id", "varchar(36)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("creator_id", creator_idColumn);
            var creator_nameColumn = new Column("creator_name", "varchar(256)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("creator_name", creator_nameColumn);
            var device_idColumn = new Column("device_id", "varchar(36)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("device_id", device_idColumn);
            var device_modelColumn = new Column("device_model", "varchar(256)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("device_model", device_modelColumn);
            var elapsedColumn = new Column("elapsed", "int", ordering_audit_operationTable);
            ordering_audit_operationTable.Columns.Add("elapsed", elapsedColumn);
            var end_timeColumn = new Column("end_time", "bigint", ordering_audit_operationTable);
            ordering_audit_operationTable.Columns.Add("end_time", end_timeColumn);
            var ipColumn = new Column("ip", "varchar(256)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("ip", ipColumn);
            var latColumn = new Column("lat", "double", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("lat", latColumn);
            var lngColumn = new Column("lng", "double", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("lng", lngColumn);
            var trace_idColumn = new Column("trace_id", "varchar(64)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("trace_id", trace_idColumn);
            var urlColumn = new Column("url", "varchar(1024)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("url", urlColumn);
            var user_agentColumn = new Column("user_agent", "varchar(1024)", ordering_audit_operationTable)
            {
                IsNullable = true
            };
            ordering_audit_operationTable.Columns.Add("user_agent", user_agentColumn);
            var pK_ordering_audit_operation = new UniqueConstraint("PK_ordering_audit_operation", ordering_audit_operationTable, new[] { idColumn0 });
            ordering_audit_operationTable.PrimaryKey = pK_ordering_audit_operation;
            var pK_ordering_audit_operationUc = RelationalModel.GetKey(this,
                "MicroserviceFramework.Auditing.Model.AuditOperation",
                new[] { "Id" });
            pK_ordering_audit_operation.MappedKeys.Add(pK_ordering_audit_operationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_audit_operationUc).Add(pK_ordering_audit_operation);
            ordering_audit_operationTable.UniqueConstraints.Add("PK_ordering_audit_operation", pK_ordering_audit_operation);
            var iX_ordering_audit_operation_creator_id = new TableIndex(
            "IX_ordering_audit_operation_creator_id", ordering_audit_operationTable, new[] { creator_idColumn }, false);
            var iX_ordering_audit_operation_creator_idIx = RelationalModel.GetIndex(this,
                "MicroserviceFramework.Auditing.Model.AuditOperation",
                new[] { "CreatorId" });
            iX_ordering_audit_operation_creator_id.MappedIndexes.Add(iX_ordering_audit_operation_creator_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_audit_operation_creator_idIx).Add(iX_ordering_audit_operation_creator_id);
            ordering_audit_operationTable.Indexes.Add("IX_ordering_audit_operation_creator_id", iX_ordering_audit_operation_creator_id);
            var iX_ordering_audit_operation_end_time = new TableIndex(
            "IX_ordering_audit_operation_end_time", ordering_audit_operationTable, new[] { end_timeColumn }, false);
            var iX_ordering_audit_operation_end_timeIx = RelationalModel.GetIndex(this,
                "MicroserviceFramework.Auditing.Model.AuditOperation",
                new[] { "EndTime" });
            iX_ordering_audit_operation_end_time.MappedIndexes.Add(iX_ordering_audit_operation_end_timeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_audit_operation_end_timeIx).Add(iX_ordering_audit_operation_end_time);
            ordering_audit_operationTable.Indexes.Add("IX_ordering_audit_operation_end_time", iX_ordering_audit_operation_end_time);
            relationalModel.Tables.Add(("ordering_audit_operation", null), ordering_audit_operationTable);
            var ordering_audit_operationTableMapping = new TableMapping(auditOperation, ordering_audit_operationTable, true);
            ordering_audit_operationTable.AddTypeMapping(ordering_audit_operationTableMapping, false);
            tableMappings0.Add(ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, auditOperation.FindProperty("Id")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(creation_timeColumn, auditOperation.FindProperty("CreationTime")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(creator_idColumn, auditOperation.FindProperty("CreatorId")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(creator_nameColumn, auditOperation.FindProperty("CreatorName")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(device_idColumn, auditOperation.FindProperty("DeviceId")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(device_modelColumn, auditOperation.FindProperty("DeviceModel")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(elapsedColumn, auditOperation.FindProperty("Elapsed")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(end_timeColumn, auditOperation.FindProperty("EndTime")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(ipColumn, auditOperation.FindProperty("IP")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(latColumn, auditOperation.FindProperty("Lat")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(lngColumn, auditOperation.FindProperty("Lng")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(trace_idColumn, auditOperation.FindProperty("TraceId")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, auditOperation.FindProperty("Url")!, ordering_audit_operationTableMapping);
            RelationalModel.CreateColumnMapping(user_agentColumn, auditOperation.FindProperty("UserAgent")!, ordering_audit_operationTableMapping);

            var auditProperty = FindEntityType("MicroserviceFramework.Auditing.Model.AuditProperty")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            auditProperty.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microserviceFrameworkAuditingModelAuditPropertyTableBase = new TableBase("MicroserviceFramework.Auditing.Model.AuditProperty", null, relationalModel);
            var entity_idColumnBase0 = new ColumnBase<ColumnMappingBase>("entity_id", "varchar(36)", microserviceFrameworkAuditingModelAuditPropertyTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("entity_id", entity_idColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "varchar(36)", microserviceFrameworkAuditingModelAuditPropertyTableBase);
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("id", idColumnBase1);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "varchar(256)", microserviceFrameworkAuditingModelAuditPropertyTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("name", nameColumnBase);
            var new_valueColumnBase = new ColumnBase<ColumnMappingBase>("new_value", "longtext", microserviceFrameworkAuditingModelAuditPropertyTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("new_value", new_valueColumnBase);
            var original_valueColumnBase = new ColumnBase<ColumnMappingBase>("original_value", "longtext", microserviceFrameworkAuditingModelAuditPropertyTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("original_value", original_valueColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("type", "varchar(256)", microserviceFrameworkAuditingModelAuditPropertyTableBase)
            {
                IsNullable = true
            };
            microserviceFrameworkAuditingModelAuditPropertyTableBase.Columns.Add("type", typeColumnBase0);
            relationalModel.DefaultTables.Add("MicroserviceFramework.Auditing.Model.AuditProperty", microserviceFrameworkAuditingModelAuditPropertyTableBase);
            var microserviceFrameworkAuditingModelAuditPropertyMappingBase = new TableMappingBase<ColumnMappingBase>(auditProperty, microserviceFrameworkAuditingModelAuditPropertyTableBase, true);
            microserviceFrameworkAuditingModelAuditPropertyTableBase.AddTypeMapping(microserviceFrameworkAuditingModelAuditPropertyMappingBase, false);
            defaultTableMappings1.Add(microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, auditProperty.FindProperty("Id")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entity_idColumnBase0, auditProperty.FindProperty("EntityId")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, auditProperty.FindProperty("Name")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)new_valueColumnBase, auditProperty.FindProperty("NewValue")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)original_valueColumnBase, auditProperty.FindProperty("OriginalValue")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, auditProperty.FindProperty("Type")!, microserviceFrameworkAuditingModelAuditPropertyMappingBase);

            var tableMappings1 = new List<TableMapping>();
            auditProperty.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var ordering_audit_propertyTable = new Table("ordering_audit_property", null, relationalModel);
            var idColumn1 = new Column("id", "varchar(36)", ordering_audit_propertyTable);
            ordering_audit_propertyTable.Columns.Add("id", idColumn1);
            var entity_idColumn0 = new Column("entity_id", "varchar(36)", ordering_audit_propertyTable)
            {
                IsNullable = true
            };
            ordering_audit_propertyTable.Columns.Add("entity_id", entity_idColumn0);
            var nameColumn = new Column("name", "varchar(256)", ordering_audit_propertyTable)
            {
                IsNullable = true
            };
            ordering_audit_propertyTable.Columns.Add("name", nameColumn);
            var new_valueColumn = new Column("new_value", "longtext", ordering_audit_propertyTable)
            {
                IsNullable = true
            };
            ordering_audit_propertyTable.Columns.Add("new_value", new_valueColumn);
            var original_valueColumn = new Column("original_value", "longtext", ordering_audit_propertyTable)
            {
                IsNullable = true
            };
            ordering_audit_propertyTable.Columns.Add("original_value", original_valueColumn);
            var typeColumn0 = new Column("type", "varchar(256)", ordering_audit_propertyTable)
            {
                IsNullable = true
            };
            ordering_audit_propertyTable.Columns.Add("type", typeColumn0);
            var pK_ordering_audit_property = new UniqueConstraint("PK_ordering_audit_property", ordering_audit_propertyTable, new[] { idColumn1 });
            ordering_audit_propertyTable.PrimaryKey = pK_ordering_audit_property;
            var pK_ordering_audit_propertyUc = RelationalModel.GetKey(this,
                "MicroserviceFramework.Auditing.Model.AuditProperty",
                new[] { "Id" });
            pK_ordering_audit_property.MappedKeys.Add(pK_ordering_audit_propertyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_audit_propertyUc).Add(pK_ordering_audit_property);
            ordering_audit_propertyTable.UniqueConstraints.Add("PK_ordering_audit_property", pK_ordering_audit_property);
            var iX_ordering_audit_property_entity_id = new TableIndex(
            "IX_ordering_audit_property_entity_id", ordering_audit_propertyTable, new[] { entity_idColumn0 }, false);
            var iX_ordering_audit_property_entity_idIx = RelationalModel.GetIndex(this,
                "MicroserviceFramework.Auditing.Model.AuditProperty",
                new[] { "EntityId" });
            iX_ordering_audit_property_entity_id.MappedIndexes.Add(iX_ordering_audit_property_entity_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_audit_property_entity_idIx).Add(iX_ordering_audit_property_entity_id);
            ordering_audit_propertyTable.Indexes.Add("IX_ordering_audit_property_entity_id", iX_ordering_audit_property_entity_id);
            relationalModel.Tables.Add(("ordering_audit_property", null), ordering_audit_propertyTable);
            var ordering_audit_propertyTableMapping = new TableMapping(auditProperty, ordering_audit_propertyTable, true);
            ordering_audit_propertyTable.AddTypeMapping(ordering_audit_propertyTableMapping, false);
            tableMappings1.Add(ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, auditProperty.FindProperty("Id")!, ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(entity_idColumn0, auditProperty.FindProperty("EntityId")!, ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, auditProperty.FindProperty("Name")!, ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(new_valueColumn, auditProperty.FindProperty("NewValue")!, ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(original_valueColumn, auditProperty.FindProperty("OriginalValue")!, ordering_audit_propertyTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, auditProperty.FindProperty("Type")!, ordering_audit_propertyTableMapping);

            var address = FindEntityType("Ordering.Domain.AggregateRoots.Address")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            address.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var orderingDomainAggregateRootsAddressTableBase = new TableBase("Ordering.Domain.AggregateRoots.Address", null, relationalModel);
            var address_cityColumnBase = new ColumnBase<ColumnMappingBase>("address_city", "varchar(200)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("address_city", address_cityColumnBase);
            var address_countryColumnBase = new ColumnBase<ColumnMappingBase>("address_country", "varchar(50)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("address_country", address_countryColumnBase);
            var address_stateColumnBase = new ColumnBase<ColumnMappingBase>("address_state", "varchar(200)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("address_state", address_stateColumnBase);
            var address_streetColumnBase = new ColumnBase<ColumnMappingBase>("address_street", "varchar(200)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("address_street", address_streetColumnBase);
            var address_zip_codeColumnBase = new ColumnBase<ColumnMappingBase>("address_zip_code", "varchar(20)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("address_zip_code", address_zip_codeColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "varchar(255)", orderingDomainAggregateRootsAddressTableBase);
            orderingDomainAggregateRootsAddressTableBase.Columns.Add("id", idColumnBase2);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.Address", orderingDomainAggregateRootsAddressTableBase);
            var orderingDomainAggregateRootsAddressMappingBase = new TableMappingBase<ColumnMappingBase>(address, orderingDomainAggregateRootsAddressTableBase, true);
            orderingDomainAggregateRootsAddressTableBase.AddTypeMapping(orderingDomainAggregateRootsAddressMappingBase, false);
            defaultTableMappings2.Add(orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, address.FindProperty("OrderId")!, orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_cityColumnBase, address.FindProperty("City")!, orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_countryColumnBase, address.FindProperty("Country")!, orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_stateColumnBase, address.FindProperty("State")!, orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_streetColumnBase, address.FindProperty("Street")!, orderingDomainAggregateRootsAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_zip_codeColumnBase, address.FindProperty("ZipCode")!, orderingDomainAggregateRootsAddressMappingBase);

            var tableMappings2 = new List<TableMapping>();
            address.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var ordering_orderTable = new Table("ordering_order", null, relationalModel);
            var idColumn2 = new Column("id", "varchar(255)", ordering_orderTable);
            ordering_orderTable.Columns.Add("id", idColumn2);
            var address_cityColumn = new Column("address_city", "varchar(200)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("address_city", address_cityColumn);
            var address_countryColumn = new Column("address_country", "varchar(50)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("address_country", address_countryColumn);
            var address_stateColumn = new Column("address_state", "varchar(200)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("address_state", address_stateColumn);
            var address_streetColumn = new Column("address_street", "varchar(200)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("address_street", address_streetColumn);
            var address_zip_codeColumn = new Column("address_zip_code", "varchar(20)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("address_zip_code", address_zip_codeColumn);
            var buyer_id2Column = new Column("buyer_id2", "varchar(36)", ordering_orderTable);
            ordering_orderTable.Columns.Add("buyer_id2", buyer_id2Column);
            var concurrency_stampColumn = new Column("concurrency_stamp", "varchar(36)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("concurrency_stamp", concurrency_stampColumn);
            var creation_timeColumn0 = new Column("creation_time", "bigint", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("creation_time", creation_timeColumn0);
            var creator_idColumn0 = new Column("creator_id", "varchar(36)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("creator_id", creator_idColumn0);
            var creator_nameColumn0 = new Column("creator_name", "varchar(256)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("creator_name", creator_nameColumn0);
            var deleter_idColumn = new Column("deleter_id", "longtext", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("deleter_id", deleter_idColumn);
            var deleter_nameColumn = new Column("deleter_name", "longtext", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("deleter_name", deleter_nameColumn);
            var deletion_timeColumn = new Column("deletion_time", "datetime(6)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("deletion_time", deletion_timeColumn);
            var description2Column = new Column("description2", "varchar(2000)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("description2", description2Column);
            var dict_jsonColumn = new Column("dict_json", "JSON", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("dict_json", dict_jsonColumn);
            var extrasColumn = new Column("extras", "JSON", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("extras", extrasColumn);
            var is_deletedColumn = new Column("is_deleted", "tinyint(1)", ordering_orderTable);
            ordering_orderTable.Columns.Add("is_deleted", is_deletedColumn);
            var last_modification_timeColumn = new Column("last_modification_time", "datetime(6)", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("last_modification_time", last_modification_timeColumn);
            var last_modifier_idColumn = new Column("last_modifier_id", "longtext", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("last_modifier_id", last_modifier_idColumn);
            var last_modifier_nameColumn = new Column("last_modifier_name", "longtext", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("last_modifier_name", last_modifier_nameColumn);
            var list_jsonColumn = new Column("list_json", "JSON", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("list_json", list_jsonColumn);
            var operator_idColumn = new Column("operator_id", "int", ordering_orderTable)
            {
                IsNullable = true
            };
            ordering_orderTable.Columns.Add("operator_id", operator_idColumn);
            var statusColumn = new Column("status", "varchar(20)", ordering_orderTable);
            ordering_orderTable.Columns.Add("status", statusColumn);
            var pK_ordering_order = new UniqueConstraint("PK_ordering_order", ordering_orderTable, new[] { idColumn2 });
            ordering_orderTable.PrimaryKey = pK_ordering_order;
            var pK_ordering_orderUc = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "Id" });
            pK_ordering_order.MappedKeys.Add(pK_ordering_orderUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_orderUc).Add(pK_ordering_order);
            var pK_ordering_orderUc0 = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.Address",
                new[] { "OrderId" });
            pK_ordering_order.MappedKeys.Add(pK_ordering_orderUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_orderUc0).Add(pK_ordering_order);
            ordering_orderTable.UniqueConstraints.Add("PK_ordering_order", pK_ordering_order);
            var iX_ordering_order_creation_time = new TableIndex(
            "IX_ordering_order_creation_time", ordering_orderTable, new[] { creation_timeColumn0 }, false);
            var iX_ordering_order_creation_timeIx = RelationalModel.GetIndex(this,
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "CreationTime" });
            iX_ordering_order_creation_time.MappedIndexes.Add(iX_ordering_order_creation_timeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_order_creation_timeIx).Add(iX_ordering_order_creation_time);
            ordering_orderTable.Indexes.Add("IX_ordering_order_creation_time", iX_ordering_order_creation_time);
            var iX_ordering_order_operator_id = new TableIndex(
            "IX_ordering_order_operator_id", ordering_orderTable, new[] { operator_idColumn }, false);
            var iX_ordering_order_operator_idIx = RelationalModel.GetIndex(this,
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "OperatorId" });
            iX_ordering_order_operator_id.MappedIndexes.Add(iX_ordering_order_operator_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_order_operator_idIx).Add(iX_ordering_order_operator_id);
            ordering_orderTable.Indexes.Add("IX_ordering_order_operator_id", iX_ordering_order_operator_id);
            relationalModel.Tables.Add(("ordering_order", null), ordering_orderTable);
            var ordering_orderTableMapping = new TableMapping(address, ordering_orderTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            ordering_orderTable.AddTypeMapping(ordering_orderTableMapping, true);
            tableMappings2.Add(ordering_orderTableMapping);
            ordering_orderTable.AddRowInternalForeignKey(address, RelationalModel.GetForeignKey(this,
                "Ordering.Domain.AggregateRoots.Address",
                new[] { "OrderId" },
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn2, address.FindProperty("OrderId")!, ordering_orderTableMapping);
            RelationalModel.CreateColumnMapping(address_cityColumn, address.FindProperty("City")!, ordering_orderTableMapping);
            RelationalModel.CreateColumnMapping(address_countryColumn, address.FindProperty("Country")!, ordering_orderTableMapping);
            RelationalModel.CreateColumnMapping(address_stateColumn, address.FindProperty("State")!, ordering_orderTableMapping);
            RelationalModel.CreateColumnMapping(address_streetColumn, address.FindProperty("Street")!, ordering_orderTableMapping);
            RelationalModel.CreateColumnMapping(address_zip_codeColumn, address.FindProperty("ZipCode")!, ordering_orderTableMapping);

            var order = FindEntityType("Ordering.Domain.AggregateRoots.Order")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var orderingDomainAggregateRootsOrderTableBase = new TableBase("Ordering.Domain.AggregateRoots.Order", null, relationalModel);
            var buyer_id2ColumnBase = new ColumnBase<ColumnMappingBase>("buyer_id2", "varchar(36)", orderingDomainAggregateRootsOrderTableBase);
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("buyer_id2", buyer_id2ColumnBase);
            var concurrency_stampColumnBase = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "varchar(36)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase);
            var creation_timeColumnBase0 = new ColumnBase<ColumnMappingBase>("creation_time", "bigint", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("creation_time", creation_timeColumnBase0);
            var creator_idColumnBase0 = new ColumnBase<ColumnMappingBase>("creator_id", "varchar(36)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("creator_id", creator_idColumnBase0);
            var creator_nameColumnBase0 = new ColumnBase<ColumnMappingBase>("creator_name", "varchar(256)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("creator_name", creator_nameColumnBase0);
            var deleter_idColumnBase = new ColumnBase<ColumnMappingBase>("deleter_id", "longtext", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("deleter_id", deleter_idColumnBase);
            var deleter_nameColumnBase = new ColumnBase<ColumnMappingBase>("deleter_name", "longtext", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("deleter_name", deleter_nameColumnBase);
            var deletion_timeColumnBase = new ColumnBase<ColumnMappingBase>("deletion_time", "datetime(6)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("deletion_time", deletion_timeColumnBase);
            var description2ColumnBase = new ColumnBase<ColumnMappingBase>("description2", "varchar(2000)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("description2", description2ColumnBase);
            var dict_jsonColumnBase = new ColumnBase<ColumnMappingBase>("dict_json", "JSON", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("dict_json", dict_jsonColumnBase);
            var extrasColumnBase = new ColumnBase<ColumnMappingBase>("extras", "JSON", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("extras", extrasColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "varchar(255)", orderingDomainAggregateRootsOrderTableBase);
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("id", idColumnBase3);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "tinyint(1)", orderingDomainAggregateRootsOrderTableBase);
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var last_modification_timeColumnBase = new ColumnBase<ColumnMappingBase>("last_modification_time", "datetime(6)", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("last_modification_time", last_modification_timeColumnBase);
            var last_modifier_idColumnBase = new ColumnBase<ColumnMappingBase>("last_modifier_id", "longtext", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("last_modifier_id", last_modifier_idColumnBase);
            var last_modifier_nameColumnBase = new ColumnBase<ColumnMappingBase>("last_modifier_name", "longtext", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("last_modifier_name", last_modifier_nameColumnBase);
            var list_jsonColumnBase = new ColumnBase<ColumnMappingBase>("list_json", "JSON", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("list_json", list_jsonColumnBase);
            var operator_idColumnBase = new ColumnBase<ColumnMappingBase>("operator_id", "int", orderingDomainAggregateRootsOrderTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("operator_id", operator_idColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "varchar(20)", orderingDomainAggregateRootsOrderTableBase);
            orderingDomainAggregateRootsOrderTableBase.Columns.Add("status", statusColumnBase);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.Order", orderingDomainAggregateRootsOrderTableBase);
            var orderingDomainAggregateRootsOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, orderingDomainAggregateRootsOrderTableBase, true);
            orderingDomainAggregateRootsOrderTableBase.AddTypeMapping(orderingDomainAggregateRootsOrderMappingBase, false);
            defaultTableMappings3.Add(orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, order.FindProperty("Id")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)buyer_id2ColumnBase, order.FindProperty("BuyerId2")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase, order.FindProperty("ConcurrencyStamp")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creation_timeColumnBase0, order.FindProperty("CreationTime")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_idColumnBase0, order.FindProperty("CreatorId")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_nameColumnBase0, order.FindProperty("CreatorName")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deleter_idColumnBase, order.FindProperty("DeleterId")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deleter_nameColumnBase, order.FindProperty("DeleterName")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletion_timeColumnBase, order.FindProperty("DeletionTime")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)description2ColumnBase, order.FindProperty("Description2")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dict_jsonColumnBase, order.FindProperty("DictJson")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)extrasColumnBase, order.FindProperty("Extras")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, order.FindProperty("IsDeleted")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modification_timeColumnBase, order.FindProperty("LastModificationTime")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modifier_idColumnBase, order.FindProperty("LastModifierId")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modifier_nameColumnBase, order.FindProperty("LastModifierName")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)list_jsonColumnBase, order.FindProperty("ListJson")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operator_idColumnBase, order.FindProperty("OperatorId")!, orderingDomainAggregateRootsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, order.FindProperty("Status")!, orderingDomainAggregateRootsOrderMappingBase);

            var tableMappings3 = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var ordering_orderTableMapping0 = new TableMapping(order, ordering_orderTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            ordering_orderTable.AddTypeMapping(ordering_orderTableMapping0, false);
            tableMappings3.Add(ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn2, order.FindProperty("Id")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(buyer_id2Column, order.FindProperty("BuyerId2")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn, order.FindProperty("ConcurrencyStamp")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(creation_timeColumn0, order.FindProperty("CreationTime")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(creator_idColumn0, order.FindProperty("CreatorId")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(creator_nameColumn0, order.FindProperty("CreatorName")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(deleter_idColumn, order.FindProperty("DeleterId")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(deleter_nameColumn, order.FindProperty("DeleterName")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(deletion_timeColumn, order.FindProperty("DeletionTime")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(description2Column, order.FindProperty("Description2")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(dict_jsonColumn, order.FindProperty("DictJson")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(extrasColumn, order.FindProperty("Extras")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(is_deletedColumn, order.FindProperty("IsDeleted")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(last_modification_timeColumn, order.FindProperty("LastModificationTime")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(last_modifier_idColumn, order.FindProperty("LastModifierId")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(last_modifier_nameColumn, order.FindProperty("LastModifierName")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(list_jsonColumn, order.FindProperty("ListJson")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(operator_idColumn, order.FindProperty("OperatorId")!, ordering_orderTableMapping0);
            RelationalModel.CreateColumnMapping(statusColumn, order.FindProperty("Status")!, ordering_orderTableMapping0);

            var orderItem = FindEntityType("Ordering.Domain.AggregateRoots.OrderItem")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            orderItem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var orderingDomainAggregateRootsOrderItemTableBase = new TableBase("Ordering.Domain.AggregateRoots.OrderItem", null, relationalModel);
            var discountColumnBase = new ColumnBase<ColumnMappingBase>("discount", "decimal(65,30)", orderingDomainAggregateRootsOrderItemTableBase);
            orderingDomainAggregateRootsOrderItemTableBase.Columns.Add("discount", discountColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "varchar(255)", orderingDomainAggregateRootsOrderItemTableBase);
            orderingDomainAggregateRootsOrderItemTableBase.Columns.Add("id", idColumnBase4);
            var order_idColumnBase = new ColumnBase<ColumnMappingBase>("order_id", "varchar(255)", orderingDomainAggregateRootsOrderItemTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderItemTableBase.Columns.Add("order_id", order_idColumnBase);
            var unit_priceColumnBase = new ColumnBase<ColumnMappingBase>("unit_price", "decimal(65,30)", orderingDomainAggregateRootsOrderItemTableBase);
            orderingDomainAggregateRootsOrderItemTableBase.Columns.Add("unit_price", unit_priceColumnBase);
            var unitsColumnBase = new ColumnBase<ColumnMappingBase>("units", "int", orderingDomainAggregateRootsOrderItemTableBase);
            orderingDomainAggregateRootsOrderItemTableBase.Columns.Add("units", unitsColumnBase);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.OrderItem", orderingDomainAggregateRootsOrderItemTableBase);
            var orderingDomainAggregateRootsOrderItemMappingBase = new TableMappingBase<ColumnMappingBase>(orderItem, orderingDomainAggregateRootsOrderItemTableBase, true);
            orderingDomainAggregateRootsOrderItemTableBase.AddTypeMapping(orderingDomainAggregateRootsOrderItemMappingBase, false);
            defaultTableMappings4.Add(orderingDomainAggregateRootsOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, orderItem.FindProperty("Id")!, orderingDomainAggregateRootsOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discountColumnBase, orderItem.FindProperty("Discount")!, orderingDomainAggregateRootsOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)order_idColumnBase, orderItem.FindProperty("OrderId")!, orderingDomainAggregateRootsOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unit_priceColumnBase, orderItem.FindProperty("UnitPrice")!, orderingDomainAggregateRootsOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitsColumnBase, orderItem.FindProperty("Units")!, orderingDomainAggregateRootsOrderItemMappingBase);

            var tableMappings4 = new List<TableMapping>();
            orderItem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var ordering_order_itemTable = new Table("ordering_order_item", null, relationalModel);
            var idColumn3 = new Column("id", "varchar(255)", ordering_order_itemTable);
            ordering_order_itemTable.Columns.Add("id", idColumn3);
            var discountColumn = new Column("discount", "decimal(65,30)", ordering_order_itemTable);
            ordering_order_itemTable.Columns.Add("discount", discountColumn);
            var order_idColumn = new Column("order_id", "varchar(255)", ordering_order_itemTable)
            {
                IsNullable = true
            };
            ordering_order_itemTable.Columns.Add("order_id", order_idColumn);
            var product_idColumn = new Column("product_id", "varchar(36)", ordering_order_itemTable)
            {
                IsNullable = true
            };
            ordering_order_itemTable.Columns.Add("product_id", product_idColumn);
            var product_nameColumn = new Column("product_name", "varchar(255)", ordering_order_itemTable)
            {
                IsNullable = true
            };
            ordering_order_itemTable.Columns.Add("product_name", product_nameColumn);
            var product_picture_urlColumn = new Column("product_picture_url", "varchar(300)", ordering_order_itemTable)
            {
                IsNullable = true
            };
            ordering_order_itemTable.Columns.Add("product_picture_url", product_picture_urlColumn);
            var unit_priceColumn = new Column("unit_price", "decimal(65,30)", ordering_order_itemTable);
            ordering_order_itemTable.Columns.Add("unit_price", unit_priceColumn);
            var unitsColumn = new Column("units", "int", ordering_order_itemTable);
            ordering_order_itemTable.Columns.Add("units", unitsColumn);
            var pK_ordering_order_item = new UniqueConstraint("PK_ordering_order_item", ordering_order_itemTable, new[] { idColumn3 });
            ordering_order_itemTable.PrimaryKey = pK_ordering_order_item;
            var pK_ordering_order_itemUc = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.OrderItem",
                new[] { "Id" });
            pK_ordering_order_item.MappedKeys.Add(pK_ordering_order_itemUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_order_itemUc).Add(pK_ordering_order_item);
            var pK_ordering_order_itemUc0 = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.OrderProduct",
                new[] { "OrderItemId" });
            pK_ordering_order_item.MappedKeys.Add(pK_ordering_order_itemUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_order_itemUc0).Add(pK_ordering_order_item);
            ordering_order_itemTable.UniqueConstraints.Add("PK_ordering_order_item", pK_ordering_order_item);
            var iX_ordering_order_item_order_id = new TableIndex(
            "IX_ordering_order_item_order_id", ordering_order_itemTable, new[] { order_idColumn }, false);
            var iX_ordering_order_item_order_idIx = RelationalModel.GetIndex(this,
                "Ordering.Domain.AggregateRoots.OrderItem",
                new[] { "OrderId" });
            iX_ordering_order_item_order_id.MappedIndexes.Add(iX_ordering_order_item_order_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_order_item_order_idIx).Add(iX_ordering_order_item_order_id);
            ordering_order_itemTable.Indexes.Add("IX_ordering_order_item_order_id", iX_ordering_order_item_order_id);
            var iX_ordering_order_item_product_id = new TableIndex(
            "IX_ordering_order_item_product_id", ordering_order_itemTable, new[] { product_idColumn }, false);
            var iX_ordering_order_item_product_idIx = RelationalModel.GetIndex(this,
                "Ordering.Domain.AggregateRoots.OrderProduct",
                new[] { "ProductId" });
            iX_ordering_order_item_product_id.MappedIndexes.Add(iX_ordering_order_item_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ordering_order_item_product_idIx).Add(iX_ordering_order_item_product_id);
            ordering_order_itemTable.Indexes.Add("IX_ordering_order_item_product_id", iX_ordering_order_item_product_id);
            relationalModel.Tables.Add(("ordering_order_item", null), ordering_order_itemTable);
            var ordering_order_itemTableMapping = new TableMapping(orderItem, ordering_order_itemTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            ordering_order_itemTable.AddTypeMapping(ordering_order_itemTableMapping, false);
            tableMappings4.Add(ordering_order_itemTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, orderItem.FindProperty("Id")!, ordering_order_itemTableMapping);
            RelationalModel.CreateColumnMapping(discountColumn, orderItem.FindProperty("Discount")!, ordering_order_itemTableMapping);
            RelationalModel.CreateColumnMapping(order_idColumn, orderItem.FindProperty("OrderId")!, ordering_order_itemTableMapping);
            RelationalModel.CreateColumnMapping(unit_priceColumn, orderItem.FindProperty("UnitPrice")!, ordering_order_itemTableMapping);
            RelationalModel.CreateColumnMapping(unitsColumn, orderItem.FindProperty("Units")!, ordering_order_itemTableMapping);

            var orderProduct = FindEntityType("Ordering.Domain.AggregateRoots.OrderProduct")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            orderProduct.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var orderingDomainAggregateRootsOrderProductTableBase = new TableBase("Ordering.Domain.AggregateRoots.OrderProduct", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "varchar(255)", orderingDomainAggregateRootsOrderProductTableBase);
            orderingDomainAggregateRootsOrderProductTableBase.Columns.Add("id", idColumnBase5);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "varchar(36)", orderingDomainAggregateRootsOrderProductTableBase);
            orderingDomainAggregateRootsOrderProductTableBase.Columns.Add("product_id", product_idColumnBase);
            var product_nameColumnBase = new ColumnBase<ColumnMappingBase>("product_name", "varchar(255)", orderingDomainAggregateRootsOrderProductTableBase);
            orderingDomainAggregateRootsOrderProductTableBase.Columns.Add("product_name", product_nameColumnBase);
            var product_picture_urlColumnBase = new ColumnBase<ColumnMappingBase>("product_picture_url", "varchar(300)", orderingDomainAggregateRootsOrderProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsOrderProductTableBase.Columns.Add("product_picture_url", product_picture_urlColumnBase);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.OrderProduct", orderingDomainAggregateRootsOrderProductTableBase);
            var orderingDomainAggregateRootsOrderProductMappingBase = new TableMappingBase<ColumnMappingBase>(orderProduct, orderingDomainAggregateRootsOrderProductTableBase, true);
            orderingDomainAggregateRootsOrderProductTableBase.AddTypeMapping(orderingDomainAggregateRootsOrderProductMappingBase, false);
            defaultTableMappings5.Add(orderingDomainAggregateRootsOrderProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, orderProduct.FindProperty("OrderItemId")!, orderingDomainAggregateRootsOrderProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_nameColumnBase, orderProduct.FindProperty("Name")!, orderingDomainAggregateRootsOrderProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_picture_urlColumnBase, orderProduct.FindProperty("PictureUrl")!, orderingDomainAggregateRootsOrderProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, orderProduct.FindProperty("ProductId")!, orderingDomainAggregateRootsOrderProductMappingBase);

            var tableMappings5 = new List<TableMapping>();
            orderProduct.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var ordering_order_itemTableMapping0 = new TableMapping(orderProduct, ordering_order_itemTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            ordering_order_itemTable.AddTypeMapping(ordering_order_itemTableMapping0, true);
            tableMappings5.Add(ordering_order_itemTableMapping0);
            ordering_order_itemTable.AddRowInternalForeignKey(orderProduct, RelationalModel.GetForeignKey(this,
                "Ordering.Domain.AggregateRoots.OrderProduct",
                new[] { "OrderItemId" },
                "Ordering.Domain.AggregateRoots.OrderItem",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn3, orderProduct.FindProperty("OrderItemId")!, ordering_order_itemTableMapping0);
            RelationalModel.CreateColumnMapping(product_nameColumn, orderProduct.FindProperty("Name")!, ordering_order_itemTableMapping0);
            RelationalModel.CreateColumnMapping(product_picture_urlColumn, orderProduct.FindProperty("PictureUrl")!, ordering_order_itemTableMapping0);
            RelationalModel.CreateColumnMapping(product_idColumn, orderProduct.FindProperty("ProductId")!, ordering_order_itemTableMapping0);

            var product = FindEntityType("Ordering.Domain.AggregateRoots.Product")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var orderingDomainAggregateRootsProductTableBase = new TableBase("Ordering.Domain.AggregateRoots.Product", null, relationalModel);
            var concurrency_stampColumnBase0 = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "varchar(36)", orderingDomainAggregateRootsProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsProductTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase0);
            var creation_timeColumnBase1 = new ColumnBase<ColumnMappingBase>("creation_time", "bigint", orderingDomainAggregateRootsProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsProductTableBase.Columns.Add("creation_time", creation_timeColumnBase1);
            var creator_idColumnBase1 = new ColumnBase<ColumnMappingBase>("creator_id", "varchar(36)", orderingDomainAggregateRootsProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsProductTableBase.Columns.Add("creator_id", creator_idColumnBase1);
            var creator_nameColumnBase1 = new ColumnBase<ColumnMappingBase>("creator_name", "varchar(256)", orderingDomainAggregateRootsProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsProductTableBase.Columns.Add("creator_name", creator_nameColumnBase1);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "varchar(255)", orderingDomainAggregateRootsProductTableBase);
            orderingDomainAggregateRootsProductTableBase.Columns.Add("id", idColumnBase6);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "varchar(256)", orderingDomainAggregateRootsProductTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsProductTableBase.Columns.Add("name", nameColumnBase0);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("price", "int", orderingDomainAggregateRootsProductTableBase);
            orderingDomainAggregateRootsProductTableBase.Columns.Add("price", priceColumnBase);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.Product", orderingDomainAggregateRootsProductTableBase);
            var orderingDomainAggregateRootsProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, orderingDomainAggregateRootsProductTableBase, true);
            orderingDomainAggregateRootsProductTableBase.AddTypeMapping(orderingDomainAggregateRootsProductMappingBase, false);
            defaultTableMappings6.Add(orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, product.FindProperty("Id")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase0, product.FindProperty("ConcurrencyStamp")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creation_timeColumnBase1, product.FindProperty("CreationTime")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_idColumnBase1, product.FindProperty("CreatorId")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creator_nameColumnBase1, product.FindProperty("CreatorName")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, product.FindProperty("Name")!, orderingDomainAggregateRootsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, product.FindProperty("Price")!, orderingDomainAggregateRootsProductMappingBase);

            var tableMappings6 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var ordering_productTable = new Table("ordering_product", null, relationalModel);
            var idColumn4 = new Column("id", "varchar(255)", ordering_productTable);
            ordering_productTable.Columns.Add("id", idColumn4);
            var concurrency_stampColumn0 = new Column("concurrency_stamp", "varchar(36)", ordering_productTable)
            {
                IsNullable = true
            };
            ordering_productTable.Columns.Add("concurrency_stamp", concurrency_stampColumn0);
            var creation_timeColumn1 = new Column("creation_time", "bigint", ordering_productTable)
            {
                IsNullable = true
            };
            ordering_productTable.Columns.Add("creation_time", creation_timeColumn1);
            var creator_idColumn1 = new Column("creator_id", "varchar(36)", ordering_productTable)
            {
                IsNullable = true
            };
            ordering_productTable.Columns.Add("creator_id", creator_idColumn1);
            var creator_nameColumn1 = new Column("creator_name", "varchar(256)", ordering_productTable)
            {
                IsNullable = true
            };
            ordering_productTable.Columns.Add("creator_name", creator_nameColumn1);
            var nameColumn0 = new Column("name", "varchar(256)", ordering_productTable)
            {
                IsNullable = true
            };
            ordering_productTable.Columns.Add("name", nameColumn0);
            var priceColumn = new Column("price", "int", ordering_productTable);
            ordering_productTable.Columns.Add("price", priceColumn);
            var pK_ordering_product = new UniqueConstraint("PK_ordering_product", ordering_productTable, new[] { idColumn4 });
            ordering_productTable.PrimaryKey = pK_ordering_product;
            var pK_ordering_productUc = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.Product",
                new[] { "Id" });
            pK_ordering_product.MappedKeys.Add(pK_ordering_productUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ordering_productUc).Add(pK_ordering_product);
            ordering_productTable.UniqueConstraints.Add("PK_ordering_product", pK_ordering_product);
            relationalModel.Tables.Add(("ordering_product", null), ordering_productTable);
            var ordering_productTableMapping = new TableMapping(product, ordering_productTable, true);
            ordering_productTable.AddTypeMapping(ordering_productTableMapping, false);
            tableMappings6.Add(ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, product.FindProperty("Id")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn0, product.FindProperty("ConcurrencyStamp")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(creation_timeColumn1, product.FindProperty("CreationTime")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(creator_idColumn1, product.FindProperty("CreatorId")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(creator_nameColumn1, product.FindProperty("CreatorName")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, product.FindProperty("Name")!, ordering_productTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, product.FindProperty("Price")!, ordering_productTableMapping);

            var user = FindEntityType("Ordering.Domain.AggregateRoots.User")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var orderingDomainAggregateRootsUserTableBase = new TableBase("Ordering.Domain.AggregateRoots.User", null, relationalModel);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "int", orderingDomainAggregateRootsUserTableBase);
            orderingDomainAggregateRootsUserTableBase.Columns.Add("id", idColumnBase7);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "varchar(256)", orderingDomainAggregateRootsUserTableBase)
            {
                IsNullable = true
            };
            orderingDomainAggregateRootsUserTableBase.Columns.Add("name", nameColumnBase1);
            relationalModel.DefaultTables.Add("Ordering.Domain.AggregateRoots.User", orderingDomainAggregateRootsUserTableBase);
            var orderingDomainAggregateRootsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, orderingDomainAggregateRootsUserTableBase, true);
            orderingDomainAggregateRootsUserTableBase.AddTypeMapping(orderingDomainAggregateRootsUserMappingBase, false);
            defaultTableMappings7.Add(orderingDomainAggregateRootsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, user.FindProperty("Id")!, orderingDomainAggregateRootsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, user.FindProperty("Name")!, orderingDomainAggregateRootsUserMappingBase);

            var tableMappings7 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var userTable = new Table("user", null, relationalModel);
            var idColumn5 = new Column("id", "int", userTable);
            userTable.Columns.Add("id", idColumn5);
            var nameColumn1 = new Column("name", "varchar(256)", userTable)
            {
                IsNullable = true
            };
            userTable.Columns.Add("name", nameColumn1);
            var pK_user = new UniqueConstraint("PK_user", userTable, new[] { idColumn5 });
            userTable.PrimaryKey = pK_user;
            var pK_userUc = RelationalModel.GetKey(this,
                "Ordering.Domain.AggregateRoots.User",
                new[] { "Id" });
            pK_user.MappedKeys.Add(pK_userUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_userUc).Add(pK_user);
            userTable.UniqueConstraints.Add("PK_user", pK_user);
            relationalModel.Tables.Add(("user", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings7.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, user.FindProperty("Name")!, userTableMapping);
            var fK_ordering_audit_entity_ordering_audit_operation_operation_id = new ForeignKeyConstraint(
                "FK_ordering_audit_entity_ordering_audit_operation_operation_id", ordering_audit_entityTable, ordering_audit_operationTable,
                new[] { operation_idColumn },
                ordering_audit_operationTable.FindUniqueConstraint("PK_ordering_audit_operation")!, ReferentialAction.NoAction);
            var fK_ordering_audit_entity_ordering_audit_operation_operation_idFk = RelationalModel.GetForeignKey(this,
                "MicroserviceFramework.Auditing.Model.AuditEntity",
                new[] { "OperationId" },
                "MicroserviceFramework.Auditing.Model.AuditOperation",
                new[] { "Id" });
            fK_ordering_audit_entity_ordering_audit_operation_operation_id.MappedForeignKeys.Add(fK_ordering_audit_entity_ordering_audit_operation_operation_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ordering_audit_entity_ordering_audit_operation_operation_idFk).Add(fK_ordering_audit_entity_ordering_audit_operation_operation_id);
            ordering_audit_entityTable.ForeignKeyConstraints.Add(fK_ordering_audit_entity_ordering_audit_operation_operation_id);
            ordering_audit_operationTable.ReferencingForeignKeyConstraints.Add(fK_ordering_audit_entity_ordering_audit_operation_operation_id);
            var fK_ordering_audit_property_ordering_audit_entity_entity_id = new ForeignKeyConstraint(
                "FK_ordering_audit_property_ordering_audit_entity_entity_id", ordering_audit_propertyTable, ordering_audit_entityTable,
                new[] { entity_idColumn0 },
                ordering_audit_entityTable.FindUniqueConstraint("PK_ordering_audit_entity")!, ReferentialAction.NoAction);
            var fK_ordering_audit_property_ordering_audit_entity_entity_idFk = RelationalModel.GetForeignKey(this,
                "MicroserviceFramework.Auditing.Model.AuditProperty",
                new[] { "EntityId" },
                "MicroserviceFramework.Auditing.Model.AuditEntity",
                new[] { "Id" });
            fK_ordering_audit_property_ordering_audit_entity_entity_id.MappedForeignKeys.Add(fK_ordering_audit_property_ordering_audit_entity_entity_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ordering_audit_property_ordering_audit_entity_entity_idFk).Add(fK_ordering_audit_property_ordering_audit_entity_entity_id);
            ordering_audit_propertyTable.ForeignKeyConstraints.Add(fK_ordering_audit_property_ordering_audit_entity_entity_id);
            ordering_audit_entityTable.ReferencingForeignKeyConstraints.Add(fK_ordering_audit_property_ordering_audit_entity_entity_id);
            var fK_ordering_order_user_operator_id = new ForeignKeyConstraint(
                "FK_ordering_order_user_operator_id", ordering_orderTable, userTable,
                new[] { operator_idColumn },
                userTable.FindUniqueConstraint("PK_user")!, ReferentialAction.NoAction);
            var fK_ordering_order_user_operator_idFk = RelationalModel.GetForeignKey(this,
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "OperatorId" },
                "Ordering.Domain.AggregateRoots.User",
                new[] { "Id" });
            fK_ordering_order_user_operator_id.MappedForeignKeys.Add(fK_ordering_order_user_operator_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ordering_order_user_operator_idFk).Add(fK_ordering_order_user_operator_id);
            ordering_orderTable.ForeignKeyConstraints.Add(fK_ordering_order_user_operator_id);
            userTable.ReferencingForeignKeyConstraints.Add(fK_ordering_order_user_operator_id);
            var fK_ordering_order_item_ordering_order_order_id = new ForeignKeyConstraint(
                "FK_ordering_order_item_ordering_order_order_id", ordering_order_itemTable, ordering_orderTable,
                new[] { order_idColumn },
                ordering_orderTable.FindUniqueConstraint("PK_ordering_order")!, ReferentialAction.NoAction);
            var fK_ordering_order_item_ordering_order_order_idFk = RelationalModel.GetForeignKey(this,
                "Ordering.Domain.AggregateRoots.OrderItem",
                new[] { "OrderId" },
                "Ordering.Domain.AggregateRoots.Order",
                new[] { "Id" });
            fK_ordering_order_item_ordering_order_order_id.MappedForeignKeys.Add(fK_ordering_order_item_ordering_order_order_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ordering_order_item_ordering_order_order_idFk).Add(fK_ordering_order_item_ordering_order_order_id);
            ordering_order_itemTable.ForeignKeyConstraints.Add(fK_ordering_order_item_ordering_order_order_id);
            ordering_orderTable.ReferencingForeignKeyConstraints.Add(fK_ordering_order_item_ordering_order_order_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
