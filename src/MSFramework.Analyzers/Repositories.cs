using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

/// <summary>
///
/// </summary>
[Generator]
// ReSharper disable once CheckNamespace
public class Repositories : ISourceGenerator
{
    /// <summary>
    ///
    /// </summary>
    /// <param name="context"></param>
    /// <exception cref="NotImplementedException"></exception>
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new AggregateRootSyntaxReceiver());
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="context"></param>
    /// <exception cref="NotImplementedException"></exception>
    public void Execute(GeneratorExecutionContext context)
    {
        var log = new StringBuilder();
        log.AppendLine($"// <auto-generated time='{DateTimeOffset.Now:yyyy-MM-dd HH:mm:ss}' />");

        if (context.SyntaxReceiver is not AggregateRootSyntaxReceiver receiver ||
            receiver.ClassDeclarationList.Count == 0)
        {
            log.Append("// warning: ").AppendLine("The count of detected class is zero");
        }
        else
        {
            foreach (var kv in receiver.ClassDeclarationList)
            {
                var classDeclaration = kv.Key;

                var entityName = context.GetFullName(classDeclaration);
                if (string.IsNullOrEmpty(entityName))
                {
                    continue;
                }

                var aggregateRootInfo =
                    context.GetAggregateRootInfo(entityName);
                if (!aggregateRootInfo.IsAggregateRoot)
                {
                    log.Append("// warning: ").Append(entityName).AppendLine(" is not an AggregateRoot");
                    continue;
                }

                log.Append("// info: handle class -> ").AppendLine(entityName);
                var typeInfo = aggregateRootInfo.Type.GetTypeInfo();
                var script = $$"""
                               // <auto-generated time='{{DateTimeOffset.Now:yyyy-MM-dd HH:mm:ss}}' />
                               using MicroserviceFramework.Domain;
                               using MicroserviceFramework.Extensions.DependencyInjection;
                               using E = {{entityName}};

                               namespace {{typeInfo.Namespace}};

                               public partial interface I{{typeInfo.TypeName}}Repository
                                   : IRepository<E, {{aggregateRootInfo.Key}}>, IScopeDependency
                               {
                               }
                               """;
                context.AddSource($"{typeInfo.Namespace}.{typeInfo.TypeName}.g.cs", SourceText.From(script, Encoding.UTF8));
            }
        }

        context.AddSource("Log.1.g.cs", SourceText.From(log.ToString(), Encoding.UTF8));
    }
}
